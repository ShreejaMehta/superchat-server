{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","_ref","socket","username","room","_useState","useState","_useState2","Object","slicedToArray","currentMessage","setCurrentMessage","_useState3","_useState4","messageList","setMessageList","sendMessage","_ref2","asyncToGenerator","_regeneratorRuntime","mark","_callee","messageData","wrap","_context","prev","next","author","message","time","Date","now","getHours","getMinutes","emit","list","concat","toConsumableArray","stop","apply","this","arguments","useEffect","off","on","data","react_default","a","createElement","className","lib_esm","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","io","connect","App","setUsername","setRoom","_useState5","_useState6","showChat","setShowChat","src_Chat","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4eb20895.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.off(\"receive_message\").on(\"receive_message\", (data) => {\n\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p>SuperChat</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent) => {\n\n            return (\n              <div\n                className='message'\n                id={username === messageContent.author ? \"other\" : \"you\"}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{messageContent.time}</p>\n                    <p id=\"author\">{messageContent.author}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Message\"\n          onChange={(event) => {\n            setCurrentMessage(event.target.value);\n          }}\n          onKeyPress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;","import \"./App.css\";\nimport { useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Chat from \"./Chat\";\nimport React from \"react\";\nconst socket = io.connect(\"http://localhost:3001\");\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n    }\n  };\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>SuperChat</h3>\n          <p>Join Chat</p>\n          <input\n            type=\"text\"\n            placeholder=\"UserName\"\n            onChange={(event) => {\n              setUsername(event.target.value);\n            }}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Room ID\"\n            onChange={(event) => {\n              setRoom(event.target.value);\n            }}\n          />\n          <button onClick={joinRoom}>Join</button>\n        </div>\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}